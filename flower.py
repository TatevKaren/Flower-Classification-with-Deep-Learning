# -*- coding: utf-8 -*-
"""Flower.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OfQJlEarX4klU6M5QxjUP96VuF7QdPA9

## LIBRARY
"""

import keras
from keras.layers import Dense, Flatten, Activation, Dropout
from keras.models import Sequential

from keras.applications.resnet50 import ResNet50
from keras.applications.resnet_v2 import ResNet152V2
from keras.applications.vgg19 import VGG19
from keras.applications.xception import Xception
from keras.applications.vgg16 import VGG16

from keras.preprocessing.image import img_to_array, ImageDataGenerator
from keras.callbacks import EarlyStopping, ModelCheckpoint

import matplotlib.pyplot as plt
from glob import glob

"""## PATH"""

train_path = "flowers/Train"
test_path = "flowers/Test"

"""## DATA AUGMENTATION"""

train_datagen = ImageDataGenerator(rescale=1./255,
                                  featurewise_center=True,
                                  featurewise_std_normalization=True,
                                  rotation_range=20,
                                  width_shift_range=0.2,
                                  height_shift_range=0.2,
                                  horizontal_flip=True)

train_generator = train_datagen.flow_from_directory(
                                  train_path,
                                  target_size=(224,224),
                                  color_mode="rgb",
                                  class_mode="categorical")

test_datagen = ImageDataGenerator(rescale=1./255,
                                  horizontal_flip=True)

test_generator = test_datagen.flow_from_directory(
                                  test_path,
                                  target_size=(224,224),
                                  color_mode="rgb",
                                  class_mode="categorical")

"""## NUMBER OF CLASS"""

className = glob(train_path +'/*')
numberOfClass=len(className)
print("Number Of Class: ", numberOfClass)

"""## MODEL"""

# Keras Application --> ResNet50, ResNet152V2, VGG19, VGG16, Xception
application_model = VGG16(include_top=False, weights='imagenet',input_shape=(224,224,3))
application_model.trainable = False

model = Sequential()

model.add(application_model)
model.add(Flatten())
model.add(Dense(128))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(numberOfClass))
model.add(Activation('softmax'))

"""## COMPILE"""

model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

"""## MODEL CHECKPOINT & EARLY STOPPING"""

model_checkpoint = ModelCheckpoint(
    filepath='flowers_application.h5',
    save_weights_only=True,
    monitor='val_accuracy',
    mode='max',
    save_best_only=True)

early = EarlyStopping(
    monitor="val_loss",
    min_delta=0,
    patience=0,
    verbose=0,
    mode="auto",
    baseline=None,
    restore_best_weights=False,
)

"""## FIT"""

batch_size = 32
epochs = 20

hist = model.fit_generator(generator=train_generator,
                           steps_per_epoch = 4240 // batch_size,
                           epochs = epochs,
                           verbose = 1,
                           callbacks =[model_checkpoint],
                           validation_data = test_generator)

"""## MODEL SAVE"""

model.save('flowers_applications_fit.h5')

"""## VISUALIZATION"""

plt.plot(hist.history["loss"], label="Train Loss")
plt.plot(hist.history["val_loss"], label="Validation Loss")
plt.legend()
plt.show()

plt.figure()

plt.plot(hist.history["accuracy"], label="Train Accuracy")
plt.plot(hist.history["val_accuracy"], label="Validation Accuracy")
plt.legend()
plt.show()

